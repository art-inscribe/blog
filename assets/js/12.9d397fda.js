(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{372:function(t,s,a){"use strict";a.r(s);var n=a(26),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js逻辑运算符"}},[t._v("#")]),t._v(" js逻辑运算符")]),t._v(" "),a("h2",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" ||")]),t._v(" "),a("p",[t._v("运算方法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v(" 只要“||”前面为false,不管“||”后面是true还是false，都返回“||”后面的值。\n\n 只要“||”前面为true,不管“||”后面是true还是false，都返回“||”前面的值。\n")])])]),a("p",[t._v("总结：真前假后")]),t._v(" "),a("h2",{attrs:{id:"-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[t._v("#")]),t._v(" &&")]),t._v(" "),a("p",[t._v("运算方法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v(" 只要“&&”前面是false，无论“&&”后面是true还是false，结果都将返“&&”前面的值;\n\n 只要“&&”前面是true，无论“&&”后面是true还是false，结果都将返“&&”后面的值;\n")])])]),a("h2",{attrs:{id:"零合并操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#零合并操作符"}},[t._v("#")]),t._v(" 零合并操作符 ??")]),t._v(" "),a("ul",[a("li",[t._v("零合并操作符 ?? 是一个逻辑操作符，当左侧的操作数为 null 或者 undefined 时，返回右侧操作数，否则返回左侧操作数。")]),t._v(" "),a("li",[t._v("空值合并操作符一般用来为常量提供默认值，保证常量不为 null 或者 undefined，以前一般使用 || 来做这件事 variable = variable || 'bar'。然而，由于 || 是一个布尔逻辑运算符，左侧的操作数会被强制转换成布尔值用于求值。任何假值（0， ''， NaN， null， undefined）都不会被返回。这导致如果你使用 0、''、NaN 作为有效值，就会出现不可预料的后果。\n正因为 || 存在这样的问题，而 ?? 的出现就是解决了这些问题，?? 只会在左侧为 undefined、null 时才返回后者，?? 可以理解为是 || 的完善解决方案。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'default'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'default'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'default'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'default'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'default'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'default'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'false'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])])]),a("ul",[a("li",[t._v("另外在赋值的时候，可以运用赋值运算符的简写 ??=")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 { b: 20, c: 10 }")]),t._v("\n")])])]),a("h2",{attrs:{id:"可选链操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可选链操作符"}},[t._v("#")]),t._v(" 可选链操作符 ?.")]),t._v(" "),a("ul",[a("li",[t._v("可选链操作符 ?. 允许读取位于连接对象链深处的属性的值，而不必验证链中的每个引用是否有效。?. 操作符的功能类似于 . 链式操作符，不同之处在于，在引用为 null 或者 undefined 的情况下不会引起错误，该表达式短路返回值是 undefined。\n当尝试访问可能不存在的对象属性时，可选链操作符将会使表达式更短、更简明。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 bar")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 undefined")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("func"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不报错，输出 undefined")]),t._v("\n")])])]),a("ul",[a("li",[t._v("以前可能会通过 obj && obj.a && obj.a.b 来获取一个深度嵌套的子属性，现在可以直接 obj?.a?.b 即可。\n可选链除了可以用在获取对象的属性，还可以用在数组的索引 arr?.[index]，也可以用在函数的判断 func?.(args)，当尝试调用一个可能不存在的方法时也可以使用可选链。\n调用一个对象上可能不存在的方法时（版本原因或者当前用户的设备不支持该功能的场景下），使用可选链可以使得表达式在函数不存在时返回 undefined 而不是直接抛异常。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("逻辑运算符和赋值表达式\n逻辑运算符和赋值表达式，新特性结合了逻辑运算符（"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("，"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("，"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v("）和赋值表达式而JavaScript已存在的 复合赋值运算符有：\n操作运算符："),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/=")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%=")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**=")]),t._v("\n位操作运算符："),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&=")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v("\n按位运算符："),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<=")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>=")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>=")]),t._v("\n现有的的运算符，其工作方式都可以如此来理解\n\n表达式：a op"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b\n\n等同于：a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a op b\n\n逻辑运算符和其他的复合赋值运算符工作方式不同\n\n表达式：a op"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b\n\n等同于：a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("op")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||=")]),t._v(" b\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等价于")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&=")]),t._v(" b\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等价于")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??=")]),t._v(" b\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等价于")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n为什么不再是跟以前的运算公式a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a op b一样呢，而是采用a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("op")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("。因为后者当且仅当a的值为"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("的时候才计算赋值，只有在必要的时候才执行分配，而前者的表达式总是执行赋值操作\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??=")]),t._v("可用来补充"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("初始化缺失的属性\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" pages "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   title"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'主会场'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/other'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" page "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" pages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n page"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("title "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'默认标题'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("table")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//(index)  title         path")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//0        "主会场"      "/"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//1        "默认标题"    "/other"')]),t._v("\n小结：\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&=")]),t._v("：当"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LHS")]),t._v("值存在时，将"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RHS")]),t._v("变量赋值给"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LHS")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||=")]),t._v("：当"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LHS")]),t._v("值不存在时，将"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RHS")]),t._v("变量赋值给"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LHS")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??=")]),t._v(" ：当"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LHS")]),t._v("值为"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("或者"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("时，将"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RHS")]),t._v("变量赋值给"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LHS")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);